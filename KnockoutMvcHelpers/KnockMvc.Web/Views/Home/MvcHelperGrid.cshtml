@model List<KnockMvc.DTO.MyRow>
@{
    ViewBag.Title = "MVC HTML Grid";
}

<style>
    .test-class-green {
        background-color: #91fcb4;
    }

    .test-class-red {
        background-color: #fc9191;
    }

    .table-bordered .borderz {
        border-left: 3px solid #fc9191;
        border-right: 3px solid #fc9191;
    }

    .table-bordered > thead > tr:first-child .borderz {
        border-top: 3px solid #fc9191 !important;
    }

    .table-bordered > tfoot > tr:last-child .borderz {
        border-bottom: 3px solid #fc9191 !important;
    }

    .footer-orange {
        background-color: orange;
    }

    .customColumnTable > tbody > tr > th:nth-child(4) {
        border-top: 3px solid #fc9191 !important;
        border-left: 3px solid #fc9191 !important;
        border-right: 3px solid #fc9191 !important;
    }

    .customColumnTable > tbody > tr > td:nth-child(4) {
        border-left: 3px solid #fc9191 !important;
        border-right: 3px solid #fc9191 !important;
    }

    .customColumnTable > tbody > tr:last-child > td:nth-child(4) {
        border-left: 3px solid #fc9191 !important;
        border-right: 3px solid #fc9191 !important;
        border-bottom: 3px solid #fc9191 !important;
    }

    .sideways {
        vertical-align: middle;
        transform: rotate(-90deg);
    }
</style>

@Html.TableFor(Model).Css("table table-striped table-bordered table-hover table-condensed").Columns(col =>
{
    col.Bind(m => m.StringValue).IsHeader().AddAttribute("data-stuff", m => m.StringValue).AddAttribute("data-xx", m => "zzzz");
    col.Bind(m => m.BoolValue).TrueFalse("Yes", "No").AddAttribute("data-stuff", m => "stuffx-" + m.IntValue);
    col.Bind(m => m.IntValue).Title("Not original INT!").HeaderClass("test-class-red").FooterSum();
    col.Bind(m => m.DoubleValue).CssClass("test-class-green text-right").AddAttribute("class", m => "cl_" + m.IntValue).Template("{value}<sup>%</sup>").Format("P2").Footer(f => f.Sum(s => s.DoubleValue));
    col.Bind(m => m.DecimalValue).Format("N2").CssClass("text-right").FooterAvg().Template("{value}x");
    col.Bind(m => m.DateValue).Format("dd-MM-yyyy HH:mm:ss").Footer(z => "INT sum = " + Model.Sum(s => s.IntValue).ToString()).HeaderClass("borderz").CssClass("borderz");
    //col.AddSpacer("some spacing").CssClass("text-center sideways");
    col.Bind(m => m.DateValue.ToString("yyyy-MM") + " - " + m.IntValue.ToString()).Title("Combination");
    col.Bind(m => (int)m.EnumValue + m.IntValue).Title("Enum(int)+int").FooterCssClass("footer-orange");
    col.Bind(m => m.NullableDecimalValue).Template("{value} X");
    col.Bind(m => m.EnumValue);
}).FooterText("Total:").GroupBy(g => g.EnumValue).AddAttribute("data-some-attr", m => "MyAttribute!")

@Html.TableFor(Model).UseColumnsAsRows().Css("table table-striped table-bordered table-hover table-condensed customColumnTable").Columns(col =>
{
    col.Bind(m => m.StringValue).IsHeader();
    col.Bind(m => m.BoolValue).TrueFalse("Yes", "No").AddAttribute("data-test", m => m.EnumValue.ToString());
    col.Bind(m => m.IntValue).Title("Not original INT!").HeaderClass("test-class-red").FooterSum();
    col.Bind(m => m.DoubleValue).CssClass("test-class-green text-right").Template("{value}<sup>%</sup>").Format("P2").Footer(f => f.Sum(s => s.DoubleValue));
    col.Bind(m => m.DecimalValue).Format("N2").CssClass("text-right").FooterAvg().Template("{value}x");
    col.Bind(m => m.DateValue).Format("dd-MM-yyyy HH:mm:ss").Footer(z => "INT sum = " + Model.Sum(s => s.IntValue).ToString());
    col.Bind(m => m.DateValue.ToString("yyyy-MM") + " - " + m.IntValue.ToString()).Title("Combination");
    col.AddSpacer("some spacing").CssClass("text-center");
    col.Bind(m => (int)m.EnumValue + m.IntValue).Title("Enum(int)+int").FooterCssClass("footer-orange");
    col.Bind(m => m.NullableDecimalValue);
}).FooterText("Total:").AddAttribute("data-some-values", m => m.Sum(s => s.IntValue))

